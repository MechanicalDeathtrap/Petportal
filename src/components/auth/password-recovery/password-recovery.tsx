import styles from "../auth-layout.module.sass";
import { Field, Form, Formik } from "formik";
import { Button } from "../../button/button.tsx";
import { useEffect, useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import * as Yup from "yup";

type emailProps = {
  email: string;
};

type codeProps = {
  code: string;
};

type passwdProps = {
  password: string;
  confirmPassword: string;
};

export const PasswordRecovery = () => {
  const [step, setStep] = useState(1);
  const [userEmail, setEmail] = useState("");
  const [isMessageOpen, setMessageOpen] = useState(0);

  const navigate = useNavigate();

  const handleNextStep = () => setStep((prev) => prev + 1);
  const handlePrevStep = () => setStep((prev) => prev - 1);
  const handleEmail = (email: string) => setEmail(email);
  const closeMessage = () => setMessageOpen(0);
  const handleMessage = () =>
    setMessageOpen(() => {
      switch (step) {
        case 1:
          return 1;
        case 2:
          return 2;
        case 3:
          return 3;
        default:
          return 0;
      }
    });

  const validationEmailSchema = Yup.object().shape({
    email: Yup.string()
      .email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞–∫ @")
      .required("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É"),
  });
  const validationCodeSchema = Yup.object().shape({
    code: Yup.string()
      .min(6, "–ö–æ–¥ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 6 —Å–∏–º–≤–æ–ª–æ–≤")
      .required("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥"),
  });
  const validationPasswordSchema = Yup.object().shape({
    password: Yup.string()
      .min(
        8,
        "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É",
      )
      .max(30, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å")
      .required("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"),
    confirmPassword: Yup.string()
      .oneOf([Yup.ref("password")], "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
      .required("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å"),
  });

  const setMessageTimer = () => {
    setTimeout(closeMessage, 5000);
  };

  // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  const save = async () => {
    console.log("save");
    return {
      error: Math.random() > 0.5 ? "500" : "200",
    };
  };

  // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  const sendEmail = async (value: emailProps) => {
    const { error } = await save();
    console.log(error);
    switch (error) {
      case "200":
        handleEmail(value.email);
        handleNextStep();
        break;
      case "500":
        handleMessage();
        break;
    }
  };

  // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  const sendCode = async (value: codeProps) => {
    const { error } = await save();
    console.log(value);
    switch (error) {
      case "200":
        handleNextStep();
        break;
      case "500":
        handleMessage();
        break;
    }
  };
  // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  const sendPassword = async (value: passwdProps) => {
    const { error } = await save();
    console.log(value);
    switch (error) {
      case "200":
        alert("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω—ë–Ω! üòä"); /*TODO –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –∏–±–æ –∂—É—Ç—å*/
        navigate("/login");
        break;
      case "500":
        handleMessage();
        break;
    }
  };

  useEffect(() => {
    if (isMessageOpen) {
      setMessageTimer();
    }
  }, [isMessageOpen]);

  return (
    <div
      className={`${styles["authorization__form-side"]} ${styles["authorization__forgotpasswd-container"]}`}
    >
      <h1>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è</h1>

      {step === 1 && (
        <>
          <p>
            –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ù–∞
            –Ω–µ–≥–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è.
          </p>
          <Formik
            initialValues={{ email: "" }}
            onSubmit={sendEmail}
            validationSchema={validationEmailSchema}
          >
            {({ handleSubmit, errors, touched }) => (
              <Form
                noValidate
                onSubmit={handleSubmit}
                className={styles["authorization__form"]}
              >
                <div>
                  <Field
                    id="email"
                    name="email"
                    type="email"
                    placeholder="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
                    className={styles["authorization__form-field"]}
                  />

                  {errors.email && touched.email ? (
                    <div
                      className={`${styles["authorization__form--error"]} ${styles["authorization__form--error-margin"]}`}
                    >
                      {errors.email}
                    </div>
                  ) : null}
                </div>
                <div
                  className={styles["authorization__forget-password-buttons"]}
                >
                  <Button
                    type="submit"
                    style="blue-button-header"
                    text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                  />
                  <Link to="/login">–ù–∞–∑–∞–¥</Link>
                </div>
              </Form>
            )}
          </Formik>
        </>
      )}

      {step === 2 && (
        <>
          <p>
            –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞. –ù–∞
            –Ω–µ–≥–æ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –ø–∏—Å—å–º–æ —Å –∫–æ–¥–æ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è.
          </p>
          <Formik
            initialValues={{ code: "" }}
            onSubmit={sendCode}
            validationSchema={validationCodeSchema}
          >
            {({ handleSubmit, errors, touched }) => (
              <Form
                noValidate
                onSubmit={handleSubmit}
                className={styles["authorization__form"]}
              >
                <Field
                  id="email"
                  name="email"
                  type="email"
                  placeholder={userEmail || "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"}
                  className={styles["authorization__form-field"]}
                  disabled
                />
                <label htmlFor="forgetpaswdCode">
                  <p>–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–∏—Å—å–º–∞ </p>
                  <Field
                    id="code"
                    name="code"
                    type="text"
                    placeholder="–ö–æ–¥"
                    className={styles["authorization__form-field"]}
                    maxLength={6}
                  />

                  {errors.code && touched.code ? (
                    <div className={styles["authorization__form--error"]}>
                      {errors.code}
                    </div>
                  ) : null}
                </label>
                <div
                  className={styles["authorization__forget-password-buttons"]}
                >
                  <Button
                    type="submit"
                    style="blue-button-header"
                    text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                  />
                  <p onClick={handlePrevStep}>–ù–∞–∑–∞–¥</p>
                </div>
              </Form>
            )}
          </Formik>
        </>
      )}

      {step === 3 && (
        <>
          <p>
            –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é
            –±—É–∫–≤—É, –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É
          </p>
          <Formik
            initialValues={{ password: "", confirmPassword: "" }}
            onSubmit={sendPassword}
            validationSchema={validationPasswordSchema}
          >
            {({ handleSubmit, errors, touched }) => (
              <Form
                noValidate
                onSubmit={handleSubmit}
                className={styles["authorization__form"]}
              >
                <Field
                  id="password"
                  name="password"
                  type="text"
                  placeholder="–ü–∞—Ä–æ–ª—å"
                  className={styles["authorization__form-field"]}
                />

                {errors.password && touched.password ? (
                  <div className={styles["authorization__form--error"]}>
                    {errors.password}
                  </div>
                ) : null}

                <Field
                  id="confirmPassword"
                  name="confirmPassword"
                  type="text"
                  placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  className={styles["authorization__form-field"]}
                />

                {errors.confirmPassword && touched.confirmPassword ? (
                  <div className={styles["authorization__form--error"]}>
                    {errors.confirmPassword}
                  </div>
                ) : null}

                <Button
                  type="submit"
                  style="blue-button-header"
                  text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
                />
              </Form>
            )}
          </Formik>
        </>
      )}

      {isMessageOpen === 1 && (
        <div className={styles["authorization__message"]}>
          <p className={styles["authorization__message--error"]}>
            {" "}
            –ê–∫–∫–∞—É–Ω—Ç–∞ —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! üòì
          </p>
        </div>
      )}

      {isMessageOpen === 2 && (
        <div className={styles["authorization__message"]}>
          <p className={styles["authorization__message--error"]}>
            {" "}
            –ö–æ–¥ –≤–≤–µ–¥—ë–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É! üòì
          </p>
        </div>
      )}

      {isMessageOpen === 3 && (
        <div className={styles["authorization__message"]}>
          <p className={styles["authorization__message--error"]}>
            {" "}
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üòì
          </p>
        </div>
      )}
    </div>
  );
};

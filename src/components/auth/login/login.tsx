import styles from "../auth-layout.module.sass";
import { Field, Form, Formik } from "formik";
import { Link, useNavigate } from "react-router-dom";
import { Button } from "../../button/button.tsx";
import * as Yup from "yup";
import { useEffect, useState } from "react";

type AuthorizationProps = {
  email: string;
  password: string;
  rememberMe: boolean;
};

export const Login = () => {
  const [isMessageOpen, setMessageOpen] = useState(false);
  const handleMessage = () => setMessageOpen((prev) => !prev);

  const navigate = useNavigate();

  const validationSchema = Yup.object().shape({
    email: Yup.string()
      .email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞–∫ @")
      .required("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É"),
    password: Yup.string()
      .min(
        8,
        "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É",
      )
      .max(30, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å")
      .required("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
  });

  const initialValues = {
    email: "",
    password: "",
    rememberMe: false,
  };

  // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  const save = async () => {
    console.log("save");
    return {
      error: Math.random() > 0.5 ? "500" : "200",
    };
  };

  // –ò–º–∏—Ç–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  const handleSubmit = async (values: AuthorizationProps) => {
    const { error } = await save();
    console.log(values.email);
    switch (error) {
      case "200":
        navigate("/");
        break;

      case "500":
        handleMessage();
        break;
    }
  };

  const setMessageTimer = () => {
    setTimeout(handleMessage, 5000);
  };

  useEffect(() => {
    if (isMessageOpen) {
      setMessageTimer();
    }
  }, [isMessageOpen]);

  return (
    <div className={styles["authorization__form-side"]}>
      <h1>–í–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å</h1>
      <Formik
        initialValues={initialValues}
        onSubmit={handleSubmit}
        validationSchema={validationSchema}
      >
        {({ handleSubmit, errors, touched }) => (
          <Form
            noValidate
            onSubmit={(e) => {
              console.log("handleSubmit –≤—ã–∑–≤–∞–Ω");
              handleSubmit(e);
            }}
            className={styles["authorization__form"]}
          >
            <div className={styles["authorization__text-fields"]}>
              <Field
                id="email"
                name="email"
                type="email"
                placeholder="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
                className={styles["authorization__form-field"]}
              />
              {errors.email && touched.email ? (
                <div className={styles["authorization__form--error"]}>
                  {errors.email}
                </div>
              ) : null}
              <Field
                id="password"
                name="password"
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                className={styles["authorization__form-field"]}
              />
              {errors.password && touched.password ? (
                <div className={styles["authorization__form--error"]}>
                  {errors.password}
                </div>
              ) : null}
            </div>
            <div>
              <label
                htmlFor="authCheckbox"
                className={styles["authorization__form-checkbox"]}
              >
                <div
                  className={`${styles["authorization__form-checkbox-container"]} ${styles["authorization__form-checkbox-container--centered"]}`}
                >
                  <Field
                    id="rememberMe"
                    name="rememberMe"
                    type="checkbox"
                    className={styles["authorization__form-checkbox-input"]}
                  />
                  <p>–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è</p>
                </div>
              </label>
              <Link to="/forget-password">–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?</Link>{" "}
              {/*TODO –ø—É—Ç—å –∫ —Å—Ç–∞–Ω–∏—Ü–µ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º */}
            </div>
            <Button
              type="submit"
              style="blue-button-header"
              text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            />
          </Form>
        )}
      </Formik>

      {isMessageOpen && (
        <div className={styles["authorization__message"]}>
          <p>
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞!
            üòì
          </p>
          {/*<p className={styles["authorization__message--error"]}> –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ–Ω—è–π—Ç–µ –ø–æ—á—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üòì</p>*/}
        </div>
      )}
    </div>
  );
};

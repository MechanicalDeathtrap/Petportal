import styles from "../auth-layout.module.sass";
import { Field, Form, Formik } from "formik";
import { Link, useNavigate } from "react-router-dom";
import { Button } from "../../button/button.tsx";
import * as Yup from "yup";
import { useEffect, useState } from "react";

type RegistrationProps = {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
  confirmPassword: string;
  acceptTerms: boolean;
};

export const Registration = () => {
  const [isMessageOpen, setMessageOpen] = useState(false);
  const handleMessage = () => setMessageOpen((prev) => !prev);

  const navigate = useNavigate();

  const validationSchema = Yup.object().shape({
    firstName: Yup.string()
      .min(3, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤")
      .max(30, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è")
      .required("–í–≤–µ–¥–∏—Ç–µ –∏–º—è"),
    lastName: Yup.string()
      .min(2, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤")
      .max(30, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ñ–∞–º–∏–ª–∏—è")
      .required("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"),
    email: Yup.string()
      .email("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–Ω–∞–∫ @")
      .required("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É"),
    password: Yup.string()
      .min(
        8,
        "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –º–∏–Ω–∏–º—É–º –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É",
      )
      .max(30, "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å")
      .required("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
    confirmPassword: Yup.string()
      .oneOf([Yup.ref("password")], "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
      .required("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"),
    acceptTerms: Yup.boolean().oneOf([true], "–ü—Ä–∏–º–∏—Ç–µ —É—Å–ª–æ–≤–∏—è").required(),
  });

  const initialValues = {
    firstName: "",
    lastName: "",
    email: "",
    password: "",
    confirmPassword: "",
    acceptTerms: false,
  };

  const handleSubmit = async (values: RegistrationProps) => {
    try {
      const requestBody = {
        Name: `${values.firstName} ${values.lastName}`,
        Email: values.email,
        Password: values.password,
      };

      const response = await fetch("http://localhost:5140/api/Authorization/register", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        credentials: "include", 
        body: JSON.stringify(requestBody),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      }

      // –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      navigate("/");
    } catch (error: any) {
      // setErrorMessage(error.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      setMessageOpen(true);
    }
  };

  const setMessageTimer = () => {
    setTimeout(handleMessage, 5000);
  };

  useEffect(() => {
    if (isMessageOpen) {
      setMessageTimer();
    }
  }, [isMessageOpen]);

  return (
    <div className={styles["authorization__form-side"]}>
      <h1>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h1>
      <Formik
        initialValues={initialValues}
        onSubmit={handleSubmit}
        validationSchema={validationSchema}
      >
        {({ handleSubmit, errors, touched }) => (
          <Form
            noValidate
            onSubmit={(e) => {
              console.log("handleSubmit –≤—ã–∑–≤–∞–Ω");
              handleSubmit(e);
            }}
            className={styles["authorization__form"]}
          >
            <div className={styles["authorization__text-fields"]}>
              <Field
                id="firstName"
                name="firstName"
                type="text"
                placeholder="–ò–º—è"
                className={styles["authorization__form-field"]}
              />
              {errors.firstName && touched.firstName ? (
                <div className={styles["authorization__form--error"]}>
                  {errors.firstName}
                </div>
              ) : null}
              <Field
                id="lastName"
                name="lastName"
                type="text"
                placeholder="–§–∞–º–∏–ª–∏—è"
                className={styles["authorization__form-field"]}
              />
              {errors.lastName && touched.lastName ? (
                <div className={styles["authorization__form--error"]}>
                  {errors.lastName}
                </div>
              ) : null}
              <Field
                id="email"
                name="email"
                type="email"
                placeholder="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞"
                className={styles["authorization__form-field"]}
              />
              {errors.email && touched.email ? (
                <div className={styles["authorization__form--error"]}>
                  {errors.email}
                </div>
              ) : null}
              <Field
                id="password"
                name="password"
                type="password"
                placeholder="–ü–∞—Ä–æ–ª—å"
                className={styles["authorization__form-field"]}
              />
              {errors.password && touched.password ? (
                <div className={styles["authorization__form--error"]}>
                  {errors.password}
                </div>
              ) : null}
              <Field
                id="confirmPassword"
                name="confirmPassword"
                type="password"
                placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                className={styles["authorization__form-field"]}
              />
              {errors.confirmPassword && touched.confirmPassword ? (
                <div className={styles["authorization__form--error"]}>
                  {errors.confirmPassword}
                </div>
              ) : null}
            </div>
            <label
              htmlFor="registrationCheckbox"
              className={styles["authorization__form-checkbox"]}
            >
              <div className={styles["authorization__form-checkbox-container"]}>
                <Field
                  id="acceptTerms"
                  name="acceptTerms"
                  type="checkbox"
                  className={styles["authorization__form-checkbox-input"]}
                />
                <p>
                  –Ø –ø—Ä–∏–Ω–∏–º–∞—é
                  <Link
                    to="/"
                    className={styles["authorization__form-checkbox-link"]}
                  >
                    {" "}
                    –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–µ–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏{" "}
                  </Link>
                  –∏{" "}
                  <Link
                    to="/"
                    className={styles["authorization__form-checkbox-link"]}
                  >
                    –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º
                  </Link>
                  <span style={{ color: "red" }}>*</span>
                  {errors.acceptTerms && touched.acceptTerms ? (
                    <div
                      className={styles["authorization__form--error-checkbox"]}
                    >
                      {errors.acceptTerms}
                    </div>
                  ) : null}
                </p>
                {/*//TODO –ø—É—Ç–∏ –∫ –¥–æ–∫–∞–º*/}
              </div>
            </label>
            <Button
              type="submit"
              style="blue-button-header"
              text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"
            />
          </Form>
        )}
      </Formik>

      {isMessageOpen && (
        <div className={styles["authorization__message"]}>
          <p>
            –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            —Å–Ω–æ–≤–∞! üòì
          </p>
          {/*<p className={styles["authorization__message--error"]}> –ê–∫–∫–∞—É–Ω—Ç —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–µ–Ω—è–π—Ç–µ –ø–æ—á—Ç—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É üòì</p>*/}
        </div>
      )}
    </div>
  );
};

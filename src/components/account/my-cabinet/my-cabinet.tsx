import style from "./my-cabinet.module.sass";
import {
  Accordion,
  AccordionDetails,
  AccordionSummary,
  Typography,
} from "@mui/material";
import { UserData } from "../../../types/user-data.ts";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import { useState, useEffect } from "react";
import { MyCabinetSettings } from "./my-cabinet-settings.tsx";
import axios from "axios";

export const MyCabinet = () => {
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isSettingsOpen, setSettingsOpen] = useState(false);
  const [avatarBlobUrl, setAvatarBlobUrl] = useState<string | null>(null);

  useEffect(() => {
    if (!userData?.avatarUrl) return;

    axios
      .get(`http://localhost:5140/api/Avatar/download/${userData.avatarUrl}`, {
        responseType: "blob",
        withCredentials: true,
      })
      .then((res) => {
        const imageUrl = URL.createObjectURL(res.data);
        setAvatarBlobUrl(imageUrl);
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:", err);
        setAvatarBlobUrl("/img/blank-avatar.png"); // fallback
      });
  }, [userData?.avatarUrl]);

  const fetchUserData = async () => {
    try {
      const res = await axios.get(
        "http://localhost:5140/api/Authorization/me",
        {
          withCredentials: true,
        },
      );

      const dto = res.data;

      const mapped: UserData = {
        id: dto.id,
        avatarUrl: dto.avatarUrl,
        firstName: dto.name.split(" ")[0],
        lastName: dto.name.split(" ")[1] ?? "",
        country: dto.country,
        town: dto.city,
        phoneNumber: dto.phone,
        email: dto.email,
        telegram: dto.telegram,
        education: dto.educations.map((e: any) => ({
          university: e.university,
          specialization: e.speciality,
          releaseYear: e.releaseYear,
        })),
        experience: dto.experiences.map((e: any) => ({
          workPlace: e.workPlace,
          workPosition: e.workPosition,
          workYears: e.workYears,
        })),
        stack: dto.stacks.map((s: any) => ({
          programmingLanguage: s.programmingLanguage,
          programmingLevel: s.programmingLevel.toString(),
          programmingYears: s.programmingYears,
        })),
      };

      setUserData(mapped);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:", err);
    }
  };

  useEffect(() => {
    console.log(userData?.id);
    fetchUserData();
  }, []);

  const handleSettingsOpen = () => {
    setSettingsOpen(true);
  };

    const handleSettingsClose = () => {
    setSettingsOpen(false);
  };

  if (!userData) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  return (
    <>
      {!isSettingsOpen ? (
        <section className={style["my-cabinet"]}>
          <div className={style["my-cabinet__my-info"]}>
            <div>
              <div
                className={`${style["my-cabinet__avatar"]} ${style["my-cabinet__avatar-margin-right"]}`}
                style={{
                  backgroundImage: `url(${avatarBlobUrl || "/img/blank-avatar.png"})`,
                }}
              />
              <div className={style["my-cabinet__main-info"]}>
                <h2>
                  {userData.firstName} {userData.lastName}
                </h2>
                  {
                    userData.country && userData.town && (<span> {userData.country}, {userData.town} </span>)
                  }
                <p>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {/* –Ω–µ—Ç –¥–∞—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}</p>
                <p>–ü—Ä–æ–µ–∫—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: 4</p>
                <p>
                  –†–µ–π—Ç–∏–Ω–≥: 4,4
                </p>
              </div>
            </div>
            <div className={style["my-cabinet__contacts"]}>
              <p>
                –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: <br />
                <span>{userData.phoneNumber || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</span>
              </p>
              <p>
                –ê–¥—Ä–µ—Å –ø–æ—á—Ç—ã: <br />
                <span>{userData.email || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</span>
              </p>
              <p>
                Telegram: <br />
                <span>{userData.telegram || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}</span>
              </p>
              <button onClick={handleSettingsOpen}>–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å</button>
            </div>
          </div>
          <div className={style["my-cabinet__about-myself"]}>
            <div>
              <h3>–û —Å–µ–±–µ</h3>
              <p>–¢—É—Ç –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è</p>
            </div>
            <div>
              <h3>–ù–∞–≤—ã–∫–∏</h3>
              <p>
                {userData.stack.map((s, idx) => (
                  <div key={idx}>
                    {s.programmingLanguage} ‚Äî {s.programmingYears} –ª–µ—Ç ‚Äî
                    –£—Ä–æ–≤–µ–Ω—å: {s.programmingLevel}
                  </div>
                ))}
              </p>
            </div>
          </div>
          <div className={style["my-cabinet__registration-error"]}>
            <h2>–£ –≤–∞—Å –Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏, –ø–æ—ç—Ç–æ–º—É —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.</h2>
            <h3>–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –ø–æ—á—Ç—É <span>daukaevk@gmail.com</span>
              &#160;–æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:</h3>
            <ol className={style["my-cabinet__registration-error-list"]}>
              <li>–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Æ–õ/–ò–ü</li>
              <li>–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ –æ –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞ –Ω–∞–ª–æ–≥–æ–≤—ã–π —É—á—ë—Ç –Æ–õ/–ò–ü</li>
              <li>–õ–∏—Å—Ç –∑–∞–ø–∏—Å–∏ –ï–ì–†–Æ–õ/–ï–ì–†–ò–ü, –µ–≥–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –Ω–∞ <a
                href="https://www.nalog.gov.ru/">nalog.gov.ru</a></li>
            </ol>
          </div>
          <Accordion className={style["my-cabinet__accordion"]}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              className={style["my-cabinet__accordion-summary"]}
            >
              <Typography component="h3">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ</Typography>
            </AccordionSummary>
            <AccordionDetails
              className={style["my-cabinet__accordion-details"]}
            >
              <Typography component="ol">
                {userData.education.map((edu, idx) => (
                  <li key={idx}>
                    {edu.university}, {edu.specialization}, {edu.releaseYear}
                  </li>
                ))}
              </Typography>
            </AccordionDetails>
          </Accordion>
          <Accordion className={style["my-cabinet__accordion"]}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              className={style["my-cabinet__accordion-summary"]}
            >
              <Typography component="h3">–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã</Typography>
            </AccordionSummary>
            <AccordionDetails
              className={style["my-cabinet__accordion-details"]}
            >
              <Typography component="ol">
                {userData.experience.map((exp, idx) => (
                  <li key={idx}>
                    {exp.workPlace}, {exp.workPosition}, {exp.workYears} –ª–µ—Ç
                  </li>
                ))}
              </Typography>
            </AccordionDetails>
          </Accordion>

          {/* üî• –°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π */}
          <Accordion className={style["my-cabinet__accordion"]}>
            <AccordionSummary
              expandIcon={<ExpandMoreIcon />}
              className={style["my-cabinet__accordion-summary"]}
            >
              <Typography component="h3">–°—Ç–µ–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</Typography>
            </AccordionSummary>
            <AccordionDetails
              className={style["my-cabinet__accordion-details"]}
            >
              <Typography component="ol">
                {userData.stack.map((stack, idx) => (
                  <li key={idx}>
                    {stack.programmingLanguage}, —É—Ä–æ–≤–µ–Ω—å:{" "}
                    {stack.programmingLevel}, –æ–ø—ã—Ç: {stack.programmingYears} –ª–µ—Ç
                  </li>
                ))}
              </Typography>
            </AccordionDetails>
          </Accordion>
        </section>
      ) : (
        <MyCabinetSettings
          onSave={() => {
            setSettingsOpen(false);
            fetchUserData();
          }}
          onClose={handleSettingsClose}
        />
      )}
    </>
  );
};
